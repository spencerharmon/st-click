use wmidi;
use wmidi::Note;

fn midi_to_bytes(message: wmidi::MidiMessage<'_>) -> Vec<u8> {
    let mut bytes = vec![0u8; message.bytes_size()];
    message.copy_to_slice(bytes.as_mut_slice()).unwrap();
    bytes
}

pub fn get_bytes_for_note_str(note: String) -> Vec<u8> {
    let msg = wmidi::MidiMessage::NoteOn(
	wmidi::Channel::Ch1,
	str_to_note(note.as_str()),
	wmidi::U7::try_from(127).unwrap()
    );
    midi_to_bytes(msg)
}

pub fn str_to_note(note: &str) -> Note {
    match note {
        "C-1" => Note::CMinus1,
        "C#/Db-1" => Note::DbMinus1,
        "D-1" => Note::DMinus1,
        "D#/Eb-1" => Note::EbMinus1,
        "E-1" => Note::EMinus1,
        "F-1" => Note::FMinus1,
        "F#/Gb-1" => Note::GbMinus1,
        "G-1" => Note::GMinus1,
        "G#/Ab-1" => Note::AbMinus1,
        "A-1" => Note::AMinus1,
        "A#/Bb-1" => Note::BbMinus1,
        "B-1" => Note::BMinus1,
        "C0" => Note::C0,
        "C#/Db0" => Note::Db0,
        "D0" => Note::D0,
        "D#/Eb0" => Note::Eb0,
        "E0" => Note::E0,
        "F0" => Note::F0,
        "F#/Gb0" => Note::Gb0,
        "G0" => Note::G0,
        "G#/Ab0" => Note::Ab0,
        "A0" => Note::A0,
        "A#/Bb0" => Note::Bb0,
        "B0" => Note::B0,
        "C1" => Note::C1,
        "C#/Db1" => Note::Db1,
        "D1" => Note::D1,
        "D#/Eb1" => Note::Eb1,
        "E1" => Note::E1,
        "F1" => Note::F1,
        "F#/Gb1" => Note::Gb1,
        "G1" => Note::G1,
        "G#/Ab1" => Note::Ab1,
        "A1" => Note::A1,
        "A#/Bb1" => Note::Bb1,
        "B1" => Note::B1,
        "C2" => Note::C2,
        "C#/Db2" => Note::Db2,
        "D2" => Note::D2,
        "D#/Eb2" => Note::Eb2,
        "E2" => Note::E2,
        "F2" => Note::F2,
        "F#/Gb2" => Note::Gb2,
        "G2" => Note::G2,
        "G#/Ab2" => Note::Ab2,
        "A2" => Note::A2,
        "A#/Bb2" => Note::Bb2,
        "B2" => Note::B2,
        "C3" => Note::C3,
        "C#/Db3" => Note::Db3,
        "D3" => Note::D3,
        "D#/Eb3" => Note::Eb3,
        "E3" => Note::E3,
        "F3" => Note::F3,
        "F#/Gb3" => Note::Gb3,
        "G3" => Note::G3,
        "G#/Ab3" => Note::Ab3,
        "A3" => Note::A3,
        "A#/Bb3" => Note::Bb3,
        "B3" => Note::B3,
        "C4" => Note::C4,
        "C#/Db4" => Note::Db4,
        "D4" => Note::D4,
        "D#/Eb4" => Note::Eb4,
        "E4" => Note::E4,
        "F4" => Note::F4,
        "F#/Gb4" => Note::Gb4,
        "G4" => Note::G4,
        "G#/Ab4" => Note::Ab4,
        "A4" => Note::A4,
        "A#/Bb4" => Note::Bb4,
        "B4" => Note::B4,
        "C5" => Note::C5,
        "C#/Db5" => Note::Db5,
        "D5" => Note::D5,
        "D#/Eb5" => Note::Eb5,
        "E5" => Note::E5,
        "F5" => Note::F5,
        "F#/Gb5" => Note::Gb5,
        "G5" => Note::G5,
        "G#/Ab5" => Note::Ab5,
        "A5" => Note::A5,
        "A#/Bb5" => Note::Bb5,
        "B5" => Note::B5,
        "C6" => Note::C6,
        "C#/Db6" => Note::Db6,
        "D6" => Note::D6,
        "D#/Eb6" => Note::Eb6,
        "E6" => Note::E6,
        "F6" => Note::F6,
        "F#/Gb6" => Note::Gb6,
        "G6" => Note::G6,
        "G#/Ab6" => Note::Ab6,
        "A6" => Note::A6,
        "A#/Bb6" => Note::Bb6,
        "B6" => Note::B6,
        "C7" => Note::C7,
        "C#/Db7" => Note::Db7,
        "D7" => Note::D7,
        "D#/Eb7" => Note::Eb7,
        "E7" => Note::E7,
        "F7" => Note::F7,
        "F#/Gb7" => Note::Gb7,
        "G7" => Note::G7,
        "G#/Ab7" => Note::Ab7,
        "A7" => Note::A7,
        "A#/Bb7" => Note::Bb7,
        "B7" => Note::B7,
        "C8" => Note::C8,
        "C#/Db8" => Note::Db8,
        "D8" => Note::D8,
        "D#/Eb8" => Note::Eb8,
        "E8" => Note::E8,
        "F8" => Note::F8,
        "F#/Gb8" => Note::Gb8,
        "G8" => Note::G8,
        "G#/Ab8" => Note::Ab8,
        "A8" => Note::A8,
        "A#/Bb8" => Note::Bb8,
        "B8" => Note::B8,
        "C9" => Note::C9,
        "C#/Db9" => Note::Db9,
        "D9" => Note::D9,
        "D#/Eb9" => Note::Eb9,
        "E9" => Note::E9,
        "F9" => Note::F9,
        "F#/Gb9" => Note::Gb9,
        "G9" => Note::G9,
	_ => panic!("invalid note: {:?}", note)
    }
}
